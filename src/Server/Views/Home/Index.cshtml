@Html.Partial("_Home")
@Html.Partial("_SessionPartial")
@section Scripts {
    <!-- libs -->
    <script src="~/js/libs.min.js?@ViewBag.Version"></script>
    <script>
        /**
         * Configure toastr notifications
         */
        toastr.options.closeButton = true;
        toastr.options.timeOut = 2000;
        toastr.options.positionClass = 'toast-bottom-right';

        /**
         * Configure error logger
         */
        errl.config = errl.config || {};
        Object.assign(errl.config, {
            version: '@ViewBag.Version',
            developer: 'hoomanlogic',
            key: '54263eb4-6ced-49bf-9bd7-14f0106c2a02',
            product: 'HoomanLogic',
            environment: null,
            getState: null,
            getUser: function () {
                return 'anonymous';
            },
            onLogged: function (err) {
                toastr.error("<p><string>Oops!</strong></p><p>We're really sorry about that.</p><p>We'll get this fixed as soon as possible.</p>" + '<a class="btn btn-default btn-link" target="_blank" href="' + errl.getErrorDetailUrl(err.errorId) + '">Show me details</a> ');
            }
        });

        /**
         * Configure client app (hostname and access token)
         */
        clientApp = clientApp || {};
        Object.assign(errl.config, {
            HOST_NAME: window.location.href.split('/').slice(0, 3).join('/'),
            setAccessToken: function (accessToken) {
                sessionStorage.setItem('accessToken', accessToken);
            },
            getAccessToken: function () {
                return sessionStorage.getItem('accessToken');
            }
        });
        
    </script>

    <!-- SIGNALR auto-generated script -->
    <script src="~/signalr/hubs"></script>

    <!-- internal <script src="~/js/app.min.js"></script> -->
    <script src="~/js/app.js?@ViewBag.Version"></script>
    <script>
        window.onerror = function () {
            errl.log(arguments);
        };

        if (!doozy.getAccessToken()) {
            // The following code looks for a fragment in the URL to get the access token which will be
            // used to call the protected Web API resource
            var fragment = hluri.getHashToken();

            if (fragment.access_token) {
                // returning with access token, restore old hash, or at least hide token
                window.location.hash = fragment.state || '';
                clientApp.setAccessToken(fragment.access_token);
            } else {
                // no token - so bounce to Authorize endpoint in AccountController to sign in or register
                window.location = "/Account/Authorize?client_id=web&response_type=token&state=" + encodeURIComponent(window.location.hash);
            }
        }

        $(document).ready(function () {
            $.ajax({
                url: clientApp.HOST_NAME + '/api/settings',
                dataType: 'json',
                headers: {
                    'Authorization': 'Bearer ' + clientApp.getAccessToken()
                },
                success: function (data) {
                    React.render(React.createElement(HoomanLogicApp, { settings: data }), document.getElementById('doozy'));
                }.bind(this),
                error: function (xhr, status, err) {
                    console.error('settings.json', status, err.toString());
                }.bind(this)
            });
        });
    </script>
}